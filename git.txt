# please look at the pdf in this same folder

# the next time it won't ask for user/password
git config credential.helper store 

# configure remote repository
git remote add <remote name> git://... 
git remote rm <remote name>

# after pull, when you get conflicts, run this command then do the "merge commit"
git add <merged file>



# stash only some files instead of all of them
git add <file>
git stash --keep-index


# remove staged files
git reset <commit>
git reset -- <filePath>

# back to the previous commit by 1 (attention! a merge commit is part of the previous attempted commit)
git reset --hard HEAD~1 
git push origin master -f           # if you want to push the reset you need to force it

git log --pretty=oneline


###################### amend a commit ######################

# move to a specific commit you want to edit
git checkout commit-id

# git commit --amend        # --author "New Author Name <New Author Email>" ### for example

now you have NOT edited the previous commit, but you created a new commit which will replace the one you wanted to edit.
For this new commit, the parent is the same of the one you wanted to edit.

Now, if you try to push normally, git will find a difference. origin/master has the old commit-id, your local master
instead has the new one. This will end up in a merge commit.

But if you want to skip the merge you can force the push. This will overwrite your remote commit with the new one.

git push origin master -f



##### how to change author of one specific commit #######

Assume for clarity of exposition that 03f482d6 is the commit whose author we are trying to replace, and 42627abe is the commit with the new author.

Checkout the commit we are trying to modify.

git checkout 03f482d6
Make the author change.

git commit --amend --author "New Author Name <New Author Email>"
Now we have a new commit with hash assumed to be 42627abe.

Checkout the original branch.

Replace the old commit with the new one locally.

git replace 03f482d6 42627abe
Rewrite all future commits based on the replacement.

git filter-branch -- --all
Remove the replacement for cleanliness.

git replace -d 03f482d6
Push the new history (only use --force if the below fails, and only after sanity checking with git log and/or git diff).

git push --force-with-lease
Instead of 4-6 you can just rebase onto new commit:

git rebase -i 42627abe
